this is the beginning to a series where I learn graphics programming in C++ through creating Minecraft

So why Minecraft?
I chose Minecraft because of the memories, but also because it seemed easy to create.
On the graphics side of things, It seemed easy enough, even though there were a few concepts I was completely confused by.
The part that truly interested me was the dynamic part of Minecraft with world generation and all of its optimization going on behind.

I chose openGL as I've already done a bit in it previously and thats what Minecraft java edition uses.
I went with version 3.3, as that seemed to have the most tutorials and community support, and I figured that I could always go back and update it to a more modern version.

The project setup went about as smoothly as it could get, and the first window didn't take too long to open. 

The next part took me almost an hour to figure out. After the window comes the triangle. I double triple checked almost every single part about my code, and it gave me an error that was almost 
irrelevant to the issue in my code. It turned out that I had the window and opengl creation in the wrong order, which caused a different error to occur.

Since the error disappeared, everything went much faster. The window was still blank even though I had already setup the triangle.
That was happening due to me programming on linux, which requires an actual shader to be present for anythinig to render.

Thats exactly what I added next, a simple shader program.
Shaders are essentially the code that runs on the gpu itself. These are usually pretty simple and only calculations that take place, as graphics cards are designed
to handle a ton of smaller calculations, really quickly.
There are two types of shaders, vertex shaders that deal with the vertices and fragment shaders deal with the c olor of the pixels that we actually see.
The shader program that I made was simple enough so that it only passed the vertices and set the color to red.
And now we have a window that displays a red triangle!

From there I turned the flat 2D triangle into a 3D triangle. I did this by using the glm library (the openGL math library) to create a matrix to simulate a simple camera angle.
I then modify the vertex shader so that it translates the object based on the camera angle.
Now that the shader is modified and the camera angle is setup, The triangle is now seen in 3D!

The next step is to turn the triangle into a square. This was a really easy change, all I had to do was modify the vertex data and the draw call.
We can now tell that the triangle has turned into a square, but there aren't enough details to make it truly convincing.

Adding more details to the object requires a texture.
Minecraft uses a texture atlas as its texure. That means that a single texture contains all or most of the games other textures. This is similar to animation sheet for 2d games.
It works by selecting a certain sub-texture, then wrapping that to the desired block. All that needs to happen is to calculate which corners go where on the block, which 
was confusing to figure out. 

Onto actually loading the texture, I started with a custom .bmp (bitmap) loader, but it ended up being to picky with the headers and caused the textures to be extremely distorted, so I 
ditched it and went with the stb_image loader, which worked perfectly on the first try.

After fixing some texture mapping issues, the cube is being properly rendered with the texture, just like the real Minecraft.

To finish it up, I added functionality so that the camera can move around instead of the static angle that its been at for a while. 

Now Minecraft has been set up for the first block.
In the next part I will be generating basic terrain.

(fixed the first error around 53:00)