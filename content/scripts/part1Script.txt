this is the beginning to a series where I learn graphics programming in C++ through creating minecraft.

So why minecraft?
I chose minecraft since on the surface level it seems easy to do. The graphics part of it seemed easy enough, and it remains simple for the first part. The more complicated part comes in general programming, with optimization and problem solving.
I've also chosen C++ for this project due to it being the first language I learned, and it is also what many game engines use. 

We start with Downloading and Installing Packages
I chose openGL 3.3, as those had the most tutorials online which would make the learning process much quicker. 
I knew that I could go back and update it to a newer version of openGL later, to something like 4.6.

After I got the project setup, I made the first window, then shortly after the first triangle
These getting the window and triangle working feels so refreshing coming from only seeing things inside of a terminal or on a webpage.

From there, I got the shaders set-up. The shaders are essentially the code that runs on the graphics cards. There are two types of shaders:
vertex shaders and fragment shaders.
The vertex shaders deal with the vertices (as one might expect), and their position relative to the screen
the fragment shaders run for every pixel and are the color that we visually see.

After setting up the shaders, I got to see the exact same triangle.

Next was the camera, as the flat triangle was getting a bit boring.
For all of the math that is done outside of the shaders (where most of the processing happens), we will be using the GLM library.

We setup the location and rotation of the camera so that we will see the triangle from an angle, and thats what we give to the shader.
The camera was then ready, and now we get to see the triangle at a new angle, in a 3d space.

But now even the triangle is boring, so I modified the triangle data to now make it a square.
Though fairly simple the change, it now looks a bunch better as the object is now truly 3d.

Next I modified the camera to actually be able to move, instead of being at a static angle.

There was only one thing left, texturing the block.
First I tried to implement a custom .bmp reader, which ended up working, in a sense. (That was with the dirt block strectched and darkened)
After having enough trouble with my custom solution, I ended up ditching it and working with stb_image.h, which worked flawlessly on the first try.


Minecraft uses a texture atlas, which means that it has all of the minecraft textures onto one texture, and then shifts the texture
to work with the block that we are given. At first I was struggling to even figure out how that would work, but it turned out that
you just needed to map the texture coords to the corners of the block on the texture atlas.

and with all of that, we now have a working minecraft dirt block being rendered.

In the next video I will be creating basic terrain generation and the ability to place blocks.